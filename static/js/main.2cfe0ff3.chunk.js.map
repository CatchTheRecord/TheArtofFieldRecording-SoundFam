{"version":3,"sources":["MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts","connection.tsx"],"names":["CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","isEnded","isActive","isSoldOut","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","isVerifying","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","console","log","disabled","state","onClick","a","gatekeeper","variant","CircularProgress","goLiveDate","require","cluster","process","toString","decimals","splTokenName","WalletContainer","div","Logo","WalletAmount","Wallet","ul","ConnectButton","WalletMultiButton","NFT","Paper","Card","MintButtonContainer","Menu","SolExplorerLink","MainContainer","MintContainer","DesContainer","Price","Chip","Home","props","balance","setBalance","setIsMinting","setIsActive","solanaExplorerLink","setSolanaExplorerLink","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","setIsSoldOut","payWithSplToken","setPayWithSplToken","price","setPrice","priceLabel","setPriceLabel","whitelistPrice","setWhitelistPrice","whitelistEnabled","setWhitelistEnabled","isBurnToken","setIsBurnToken","whitelistTokenBalance","setWhitelistTokenBalance","setIsEnded","endDate","setEndDate","isPresale","setIsPresale","isWLOnly","setIsWLOnly","open","message","severity","undefined","alertState","setAlertState","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","wallet","useWallet","setCandyMachine","rpcUrl","rpcHost","anchorWallet","useMemo","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","connection","Connection","candyMachineId","getCandyMachineState","cndy","divider","Array","join","slice","tokenMint","toNumber","LAMPORTS_PER_SOL","whitelistMintSettings","mode","burnEveryTime","presale","discountPrice","getAtaForMint","mint","getTokenAccountBalance","tokenBalance","value","uiAmount","error","endSettings","endSettingType","date","toDate","number","Date","getTime","amount","limit","Math","min","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","expireOnUse","Error","hideDuration","startsWith","displaySuccess","mintPublicKey","qty","remaining","throwConfetti","confetti","particleCount","spread","origin","y","beforeTransactions","afterTransactions","connected","program","createAccountsForMint","setupMint","status","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","setupState","anchor","Keypair","generate","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","msg","code","indexOf","getBalance","collectionTitle","collectionDescription","collectionPhoto","clientId","mintConfig","className","style","width","toLocaleString","Snackbar","autoHideDuration","onClose","href","target","elevation","label","now","onMount","completed","onComplete","renderer","days","hours","minutes","PublicKey","CANDY_MACHINE_PROGRAM","gatekeeperNetwork","clusterUrl","options","autoShowModal","seconds","shortenAddress","e","getCandyMachineId","network","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolflareWebWallet","getSolletWallet","getSolletExtensionWallet","getSolongWallet","getLedgerWallet","getSafePalWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","done","slot","confirmations","Promise","resolve","reject","setTimeout","getSignatureStatuses","signatureStatuses","sleep","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","fetchIdl","idl","account","fetch","id","authority","isWhitelistOnly","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","txs","userTokenAccount","userPayingAccountAddress","remainingAccounts","push","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","toBase58","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","mintTxn","address","chars","ms","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","filter","signatures","find","sig","equals","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","all","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","simulateResult","simulateTransaction","logs","line","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","args","encoding","_rpcRequest","res","subId","onSignature","context","removeSignatureListener"],"mappings":"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","file":"static/js/main.2cfe0ff3.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\r\nimport {CandyMachineAccount} from './candy-machine';\r\n\r\n\r\nexport const CTAButton = styled(Button)`\r\n  display: block !important;\r\n  margin: 0 auto !important;\r\n  background-color: var(--title-text-color) !important;\r\n  min-width: 120px !important;\r\n  font-size: 1em !important;\r\n`;\r\n\r\nexport const MintButton = ({\r\n                               onMint,\r\n                               candyMachine,\r\n                               isMinting,\r\n                               isEnded,\r\n                               isActive,\r\n                               isSoldOut\r\n                           }: {\r\n    onMint: () => Promise<void>;\r\n    candyMachine?: CandyMachineAccount;\r\n    isMinting: boolean;\r\n    isEnded: boolean;\r\n    isActive: boolean;\r\n    isSoldOut: boolean;\r\n}) => {\r\n    const {requestGatewayToken, gatewayStatus} = useGateway();\r\n    const [clicked, setClicked] = useState(false);\r\n    const [isVerifying, setIsVerifying] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsVerifying(false);\r\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\r\n            // when user approves wallet verification txn\r\n            setIsVerifying(true);\r\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\r\n            console.log('Verified human, now minting...');\r\n            onMint();\r\n            setClicked(false);\r\n        }\r\n    }, [gatewayStatus, clicked, setClicked, onMint]);\r\n\r\n    return (\r\n        <CTAButton\r\n            disabled={\r\n                clicked ||\r\n                candyMachine?.state.isSoldOut ||\r\n                isSoldOut ||\r\n                isMinting ||\r\n                isEnded ||\r\n                !isActive ||\r\n                isVerifying\r\n            }\r\n            onClick={async () => {\r\n                if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\r\n                    console.log('Requesting gateway token');\r\n                    setClicked(true);\r\n                    await requestGatewayToken();\r\n                } else {\r\n                    console.log('Minting...');\r\n                    await onMint();\r\n                }\r\n            }}\r\n            variant=\"contained\"\r\n        >\r\n            {!candyMachine ? (\r\n                \"CONNECTING...\"\r\n            ) : candyMachine?.state.isSoldOut || isSoldOut ? (\r\n                'SOLD OUT'\r\n            ) : isActive ? (\r\n                isVerifying ? 'VERIFYING...' :\r\n                    isMinting || clicked ? (\r\n                        <CircularProgress/>\r\n                    ) : (\r\n                        \"MINT\"\r\n                    )\r\n            ) : isEnded ? \"ENDED\" : (candyMachine?.state.goLiveDate ? (\r\n                \"SOON\"\r\n            ) : (\r\n                \"UNAVAILABLE\"\r\n            ))}\r\n        </CTAButton>\r\n    );\r\n};\r\n","import {useCallback, useEffect, useMemo, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport confetti from \"canvas-confetti\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport {\r\n    Commitment,\r\n    Connection,\r\n    PublicKey,\r\n    Transaction,\r\n    LAMPORTS_PER_SOL\r\n} from \"@solana/web3.js\";\r\nimport {WalletAdapterNetwork} from '@solana/wallet-adapter-base';\r\nimport {useWallet} from \"@solana/wallet-adapter-react\";\r\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\r\nimport {GatewayProvider} from '@civic/solana-gateway-react';\r\nimport Countdown from \"react-countdown\";\r\nimport { Snackbar, Paper, Chip } from \"@material-ui/core\";\r\nimport { AlertState, getAtaForMint, toDate } from \"./utils\";\r\nimport { MintButton } from \"./MintButton\";\r\nimport { CrossmintPayButton } from \"@crossmint/client-sdk-react-ui\";\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CANDY_MACHINE_PROGRAM,\r\n  CandyMachineAccount,\r\n  createAccountsForMint,\r\n  getCandyMachineState,\r\n  getCollectionPDA,\r\n  shortenAddress,\r\n  mintOneToken,\r\n  SetupState,\r\n} from \"./candy-machine\";\r\nrequire(\"@crossmint/client-sdk-vanilla-ui\");\r\n\r\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\r\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS\r\n  ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS!.toString()\r\n  : 9;\r\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME\r\n  ? process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME.toString()\r\n  : \"TOKEN\";\r\n\r\nconst WalletContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  background: black;\r\n  padding: 0.6em;\r\n  background: #020202bf;\r\n  z-index: 1;\r\n`;\r\nconst Logo = styled.div`\r\n  padding\r\n  display: flex;\r\n  -webkit-flex-direction: row;\r\n  -ms-flex-direction: row;\r\n  flex-direction: row;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  -webkit-box-pack: center;\r\n  -webkit-justify-content: center;\r\n  -ms-flex-pack: center;\r\n  justify-content: space-between !important;\r\n\r\n  overflow: hidden;\r\n  position: fixed;\r\n  bottom: 0;\r\n  width: 100%;\r\n  z-index:1;\r\n`;\r\nconst WalletAmount = styled.div`\r\n  color: black;\r\n  width: auto;\r\n  padding: 5px 5px 5px 16px;\r\n  min-width: 48px;\r\n  min-height: auto;\r\n  border-radius: 22px;\r\n  background-color: var(--main-text-color);\r\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%),\r\n    0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\r\n  box-sizing: border-box;\r\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\r\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\r\n    border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n  font-weight: 500;\r\n  line-height: 1.75;\r\n  text-transform: uppercase;\r\n  border: 0;\r\n  margin: 0;\r\n  display: inline-flex;\r\n  outline: 0;\r\n  position: relative;\r\n  align-items: center;\r\n  user-select: none;\r\n  vertical-align: middle;\r\n  justify-content: flex-start;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Wallet = styled.ul`\r\n  flex: 0 0 auto;\r\n  padding: 0;\r\n  margin-right: 3.5em !important;\r\n  margin: 0px;\r\n  justify-content: right;\r\n`;\r\n\r\nconst ConnectButton = styled(WalletMultiButton)`\r\n  border-radius: 18px !important;\r\n  padding: 6px 16px;\r\n  background-color: #fa26a0;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst NFT = styled(Paper)`\r\n  min-width: 32em !important;\r\n  margin: 0 auto;\r\n  padding: 5px 20px 20px 20px;\r\n  flex: 1 1 auto;\r\n  background-color: var(--card-background-color) !important;\r\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22) !important;\r\n  margin-top: 6em;\r\n`;\r\n\r\nconst Card = styled(Paper)`\r\n  display: inline-block;\r\n  background-color: var(--countdown-background-color) !important;\r\n  margin: 5px;\r\n  min-width: 40px;\r\n  padding: 24px;\r\n  h1 {\r\n    margin: 0px;\r\n  }\r\n`;\r\n\r\nconst MintButtonContainer = styled.div`\r\n  button.MuiButton-contained:not(.MuiButton-containedPrimary) {\r\n    color: #fff;\r\n    border-radius: 50px;\r\n    width: 250px;\r\n  }\r\n\r\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\r\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\r\n    -webkit-animation: pulse 1s;\r\n    animation: pulse 1s;\r\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\r\n  }\r\n\r\n  @-webkit-keyframes pulse {\r\n    0% {\r\n      box-shadow: 0 0 0 0 #ef8f6e;\r\n    }\r\n  }\r\n\r\n  @keyframes pulse {\r\n    0% {\r\n      box-shadow: 0 0 0 0 #ef8f6e;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Menu = styled.ul`\r\n  list-style: none;\r\n  display: relative;\r\n  flex: 1 0 auto;\r\n  margin: 0px;\r\n`;\r\nconst SolExplorerLink = styled.a`\r\n  color: var(--title-text-color);\r\n  border-bottom: 1px solid var(--title-text-color);\r\n  font-weight: bold;\r\n  list-style-image: none;\r\n  list-style-position: outside;\r\n  list-style-type: none;\r\n  outline: none;\r\n  text-decoration: none;\r\n  text-size-adjust: 100%;\r\n\r\n  :hover {\r\n    border-bottom: 2px solid var(--title-text-color);\r\n  }\r\n`;\r\n\r\nconst MainContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 20px;\r\n\r\n  text-align: center;\r\n  justify-content: center;\r\n`;\r\nconst MintContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex: 1 1 auto;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  z-index: 1;\r\n`;\r\n\r\nconst DesContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1 1 auto;\r\n  gap: 20px;\r\n`;\r\n\r\nconst Price = styled(Chip)`\r\n  position: absolute;\r\n  margin: 5px;\r\n  font-weight: bold;\r\n  font-size: 1.2em !important;\r\n  font-family: \"Patrick Hand\", cursive !important;\r\n`;\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n  network: WalletAdapterNetwork;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [balance, setBalance] = useState<number>();\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n  const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\r\n  const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\r\n  const [itemsAvailable, setItemsAvailable] = useState(0);\r\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\r\n  const [itemsRemaining, setItemsRemaining] = useState(0);\r\n  const [isSoldOut, setIsSoldOut] = useState(false);\r\n  const [payWithSplToken, setPayWithSplToken] = useState(false);\r\n  const [price, setPrice] = useState(0);\r\n  const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\r\n  const [whitelistPrice, setWhitelistPrice] = useState(0);\r\n  const [whitelistEnabled, setWhitelistEnabled] = useState(false);\r\n  const [isBurnToken, setIsBurnToken] = useState(false);\r\n  const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\r\n  const [isEnded, setIsEnded] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [isWLOnly, setIsWLOnly] = useState(false);\r\n\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\r\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\r\n\r\n  const wallet = useWallet();\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const solFeesEstimation = 0.012; // approx of account creation fees\r\n\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const refreshCandyMachineState = useCallback(\r\n    async (commitment: Commitment = \"confirmed\") => {\r\n      if (!anchorWallet) {\r\n        return;\r\n      }\r\n\r\n      const connection = new Connection(props.rpcHost, commitment);\r\n\r\n      if (props.candyMachineId) {\r\n        try {\r\n          const cndy = await getCandyMachineState(\r\n            anchorWallet,\r\n            props.candyMachineId,\r\n            connection\r\n          );\r\n\r\n          setCandyMachine(cndy);\r\n          setItemsAvailable(cndy.state.itemsAvailable);\r\n          setItemsRemaining(cndy.state.itemsRemaining);\r\n          setItemsRedeemed(cndy.state.itemsRedeemed);\r\n\r\n          var divider = 1;\r\n          if (decimals) {\r\n            divider = +(\"1\" + new Array(decimals).join(\"0\").slice() + \"0\");\r\n          }\r\n\r\n          // detect if using spl-token to mint\r\n          if (cndy.state.tokenMint) {\r\n            setPayWithSplToken(true);\r\n            // Customize your SPL-TOKEN Label HERE\r\n            // TODO: get spl-token metadata name\r\n            setPriceLabel(splTokenName);\r\n            setPrice(cndy.state.price.toNumber() / divider);\r\n            setWhitelistPrice(cndy.state.price.toNumber() / divider);\r\n          } else {\r\n            setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\r\n            setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\r\n          }\r\n\r\n          // fetch whitelist token balance\r\n          if (cndy.state.whitelistMintSettings) {\r\n            setWhitelistEnabled(true);\r\n            setIsBurnToken(cndy.state.whitelistMintSettings.mode.burnEveryTime);\r\n            setIsPresale(cndy.state.whitelistMintSettings.presale);\r\n            setIsWLOnly(\r\n              !isPresale &&\r\n                cndy.state.whitelistMintSettings.discountPrice === null\r\n            );\r\n\r\n            if (\r\n              cndy.state.whitelistMintSettings.discountPrice !== null &&\r\n              cndy.state.whitelistMintSettings.discountPrice !==\r\n                cndy.state.price\r\n            ) {\r\n              if (cndy.state.tokenMint) {\r\n                setWhitelistPrice(\r\n                  cndy.state.whitelistMintSettings.discountPrice?.toNumber() /\r\n                    divider\r\n                );\r\n              } else {\r\n                setWhitelistPrice(\r\n                  cndy.state.whitelistMintSettings.discountPrice?.toNumber() /\r\n                    LAMPORTS_PER_SOL\r\n                );\r\n              }\r\n            }\r\n\r\n            let balance = 0;\r\n            try {\r\n              const tokenBalance =\r\n                await props.connection.getTokenAccountBalance(\r\n                  (\r\n                    await getAtaForMint(\r\n                      cndy.state.whitelistMintSettings.mint,\r\n                      anchorWallet.publicKey\r\n                    )\r\n                  )[0]\r\n                );\r\n\r\n              balance = tokenBalance?.value?.uiAmount || 0;\r\n            } catch (e) {\r\n              console.error(e);\r\n              balance = 0;\r\n            }\r\n            if (commitment !== \"processed\") {\r\n              setWhitelistTokenBalance(balance);\r\n            }\r\n            setIsActive(isPresale && !isEnded && balance > 0);\r\n          } else {\r\n            setWhitelistEnabled(false);\r\n          }\r\n\r\n          // end the mint when date is reached\r\n          if (cndy?.state.endSettings?.endSettingType.date) {\r\n            setEndDate(toDate(cndy.state.endSettings.number));\r\n            if (\r\n              cndy.state.endSettings.number.toNumber() <\r\n              new Date().getTime() / 1000\r\n            ) {\r\n              setIsEnded(true);\r\n              setIsActive(false);\r\n            }\r\n          }\r\n          // end the mint when amount is reached\r\n          if (cndy?.state.endSettings?.endSettingType.amount) {\r\n            let limit = Math.min(\r\n              cndy.state.endSettings.number.toNumber(),\r\n              cndy.state.itemsAvailable\r\n            );\r\n            setItemsAvailable(limit);\r\n            if (cndy.state.itemsRedeemed < limit) {\r\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n            } else {\r\n              setItemsRemaining(0);\r\n              cndy.state.isSoldOut = true;\r\n              setIsEnded(true);\r\n            }\r\n          } else {\r\n            setItemsRemaining(cndy.state.itemsRemaining);\r\n          }\r\n\r\n          if (cndy.state.isSoldOut) {\r\n            setIsActive(false);\r\n          }\r\n\r\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\r\n          const collectionPDAAccount = await connection.getAccountInfo(\r\n            collectionPDA\r\n          );\r\n\r\n          const txnEstimate =\r\n            892 +\r\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\r\n            (cndy.state.tokenMint ? 66 : 0) +\r\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\r\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\r\n            (cndy.state.gatekeeper ? 33 : 0) +\r\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\r\n\r\n          setNeedTxnSplit(txnEstimate > 1230);\r\n        } catch (e) {\r\n          if (e instanceof Error) {\r\n            if (\r\n              e.message === `Account does not exist ${props.candyMachineId}`\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            } else if (\r\n              e.message.startsWith(\"failed to get info about account\")\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            }\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: `${e}`,\r\n              severity: \"error\",\r\n              hideDuration: null,\r\n            });\r\n          }\r\n          console.log(e);\r\n        }\r\n      } else {\r\n        setAlertState({\r\n          open: true,\r\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\r\n          severity: \"error\",\r\n          hideDuration: null,\r\n        });\r\n      }\r\n    },\r\n    [\r\n      anchorWallet,\r\n      props.candyMachineId,\r\n      props.rpcHost,\r\n      isEnded,\r\n      isPresale,\r\n      props.connection,\r\n    ]\r\n  );\r\n\r\n  const renderGoLiveDateCounter = ({ days, hours, minutes, seconds }: any) => {\r\n    return (\r\n      <div>\r\n        <Card elevation={1}>\r\n          <h1>{days}</h1>Days\r\n        </Card>\r\n        <Card elevation={1}>\r\n          <h1>{hours}</h1>\r\n          Hours\r\n        </Card>\r\n        <Card elevation={1}>\r\n          <h1>{minutes}</h1>Mins\r\n        </Card>\r\n        <Card elevation={1}>\r\n          <h1>{seconds}</h1>Secs\r\n        </Card>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderEndDateCounter = ({ days, hours, minutes }: any) => {\r\n    let label = \"\";\r\n    if (days > 0) {\r\n      label += days + \" days \";\r\n    }\r\n    if (hours > 0) {\r\n      label += hours + \" hours \";\r\n    }\r\n    label += minutes + 1 + \" minutes left to MINT.\";\r\n    return (\r\n      <div>\r\n        <h3>{label}</h3>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  function displaySuccess(mintPublicKey: any, qty: number = 1): void {\r\n    let remaining = itemsRemaining - qty;\r\n    setItemsRemaining(remaining);\r\n    setIsSoldOut(remaining === 0);\r\n    if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\r\n      let balance = whitelistTokenBalance - qty;\r\n      setWhitelistTokenBalance(balance);\r\n      setIsActive(isPresale && !isEnded && balance > 0);\r\n    }\r\n    setSetupTxn(undefined);\r\n    setItemsRedeemed(itemsRedeemed + qty);\r\n    if (!payWithSplToken && balance && balance > 0) {\r\n      setBalance(\r\n        balance -\r\n          (whitelistEnabled ? whitelistPrice : price) * qty -\r\n          solFeesEstimation\r\n      );\r\n    }\r\n    setSolanaExplorerLink(\r\n      cluster === \"devnet\" || cluster === \"testnet\"\r\n        ? \"https://solscan.io/token/\" + mintPublicKey + \"?cluster=\" + cluster\r\n        : \"https://solscan.io/token/\" + mintPublicKey\r\n    );\r\n    setIsMinting(false);\r\n    throwConfetti();\r\n  }\r\n\r\n  function throwConfetti(): void {\r\n    confetti({\r\n      particleCount: 400,\r\n      spread: 70,\r\n      origin: { y: 0.6 },\r\n    });\r\n  }\r\n\r\n  const onMint = async (\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = []\r\n  ) => {\r\n    try {\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        setIsMinting(true);\r\n        let setupMint: SetupState | undefined;\r\n        if (needTxnSplit && setupTxn === undefined) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Please validate account setup transaction\",\r\n            severity: \"info\",\r\n          });\r\n          setupMint = await createAccountsForMint(\r\n            candyMachine,\r\n            wallet.publicKey\r\n          );\r\n          let status: any = { err: true };\r\n          if (setupMint.transaction) {\r\n            status = await awaitTransactionSignatureConfirmation(\r\n              setupMint.transaction,\r\n              props.txTimeout,\r\n              props.connection,\r\n              true\r\n            );\r\n          }\r\n          if (status && !status.err) {\r\n            setSetupTxn(setupMint);\r\n            setAlertState({\r\n              open: true,\r\n              message:\r\n                \"Setup transaction succeeded! You can now validate mint transaction\",\r\n              severity: \"info\",\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: \"Mint failed! Please try again!\",\r\n              severity: \"error\",\r\n            });\r\n            return;\r\n          }\r\n        }\r\n\r\n        const setupState = setupMint ?? setupTxn;\r\n        const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\r\n        let mintResult = await mintOneToken(\r\n          candyMachine,\r\n          wallet.publicKey,\r\n          mint,\r\n          beforeTransactions,\r\n          afterTransactions,\r\n          setupState\r\n        );\r\n\r\n        let status: any = { err: true };\r\n        let metadataStatus = null;\r\n        if (mintResult) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintResult.mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true\r\n          );\r\n\r\n          metadataStatus =\r\n            await candyMachine.program.provider.connection.getAccountInfo(\r\n              mintResult.metadataKey,\r\n              \"processed\"\r\n            );\r\n          console.log(\"Metadata status: \", !!metadataStatus);\r\n        }\r\n\r\n        if (status && !status.err && metadataStatus) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n          });\r\n\r\n          // update front-end amounts\r\n          displaySuccess(mint.publicKey);\r\n          refreshCandyMachineState(\"processed\");\r\n        } else if (status && !status.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message:\r\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\r\n            severity: \"error\",\r\n            hideDuration: 8000,\r\n          });\r\n          refreshCandyMachineState();\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n          refreshCandyMachineState();\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = \"Transaction Timeout! Please try again.\";\r\n        } else if (error.message.indexOf(\"0x138\")) {\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      setIsMinting(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (anchorWallet) {\r\n        const balance = await props.connection.getBalance(\r\n          anchorWallet!.publicKey\r\n        );\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [anchorWallet, props.connection]);\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    isEnded,\r\n    isPresale,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  return (\r\n    <main>\r\n      <MainContainer>\r\n      <CrossmintPayButton\r\n                collectionTitle=\"The Art of Field Recording\"\r\n                collectionDescription=\"The 1st pro-audio community collection of arts about field recording was designed in collab with neural network close to the style of one Swiss-born German artist. There are 505 unique works depicting all possible variations on field recording in a vibrant way of abstract expressionism. There are the recordings of the sea and forests, busy streets and public transport, the rain and a bonfire, the buzzing of a fly, whistling winds, meadows, the bells and human voices (indoor and outdoor public tones), classical concerts, winter chill vibes and others.\"\r\n                collectionPhoto=\"https://gateway.pinata.cloud/ipfs/QmPNwn4wSfdLowy15rdFJyf1t6CbS2URds327LSYxuprPA\"\r\n                clientId=\"396e4c63-20bd-477c-b041-c5bd6d4b198d\"\r\n                mintConfig={{\"type\":\"candy-machine\"}}\r\n            />\r\n        <WalletContainer>\r\n          {wallet.connected\r\n            ? \"Wallet Connected successfully\"\r\n            : \"The Art of Field Recording minting page - Please connect your wallet\"}\r\n        </WalletContainer>\r\n        <br />\r\n        <Logo>\r\n          <WalletContainer>\r\n            <Menu>\r\n              {wallet.connected && (\r\n                <div className=\"container\">\r\n                  <div className=\"progressbar-container\">\r\n                    <div\r\n                      className=\"progressbar-complete\"\r\n                      style={{\r\n                        width: `${\r\n                          100 - (itemsRemaining * 100) / itemsAvailable\r\n                        }%`,\r\n                      }}\r\n                    >\r\n                      <div className=\"progressbar-liquid\"></div>\r\n                    </div>\r\n                    <span className=\"progress\">\r\n                      TOTAL MINTED : {itemsRedeemed} / {itemsAvailable}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </Menu>\r\n            <Wallet>\r\n              {wallet.connected ? (\r\n                <WalletAmount>\r\n                  {(balance || 0).toLocaleString()} SOL\r\n                  <ConnectButton />\r\n                </WalletAmount>\r\n              ) : (\r\n                <ConnectButton>Connect Wallet</ConnectButton>\r\n              )}\r\n            </Wallet>\r\n          </WalletContainer>\r\n        </Logo>\r\n        {wallet.connected && <div className=\"overlay\"></div>}\r\n        {wallet.connected && (\r\n          <MintContainer>\r\n            <DesContainer>\r\n              <Snackbar\r\n                open={alertState.open}\r\n                autoHideDuration={1000}\r\n                onClose={() => setAlertState({ ...alertState, open: false })}\r\n              >\r\n                <div className=\"alertdiv\">\r\n                  <div className=\"alertmsg\">\r\n                    <div className=\"alerttext\">\r\n                      {\" \"}\r\n                      {alertState.message} <br />{\" \"}\r\n                      <div className=\"lnk\">\r\n                        {wallet && isActive && solanaExplorerLink && (\r\n                          <SolExplorerLink\r\n                            href={solanaExplorerLink}\r\n                            target=\"_blank\"\r\n                          >\r\n                            View on Solscan\r\n                          </SolExplorerLink>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Snackbar>\r\n              <NFT elevation={3}>\r\n              <h2>The Art Of Field Recording</h2>\r\n                <h2>\r\n                  Total Minted {itemsRedeemed} / {itemsAvailable}\r\n                </h2>\r\n                {wallet &&\r\n                  isActive &&\r\n                  whitelistEnabled &&\r\n                  whitelistTokenBalance > 0 && (\r\n                    <h3>\r\n                      This Wallet is alloted {whitelistTokenBalance} Mint{\" \"}\r\n                      {whitelistTokenBalance > 1 ? \"Tokens\" : \"Token\"}.\r\n                    </h3>\r\n                  )}\r\n                <div>\r\n                  <Price\r\n                    label={\r\n                      isActive && whitelistEnabled && whitelistTokenBalance > 0\r\n                        ? \"WhiteList Mint Price :\" +\r\n                          whitelistPrice +\r\n                          \" \" +\r\n                          priceLabel\r\n                        : \"Mint Price :\" + price + \" \" + priceLabel\r\n                    }\r\n                  />\r\n                </div>\r\n                <br />\r\n                {wallet &&\r\n                  isActive &&\r\n                  whitelistEnabled &&\r\n                  whitelistTokenBalance > 0 &&\r\n                  !isBurnToken && (\r\n                    <h3>You are whitelisted and allowed to mint.</h3>\r\n                  )}\r\n                {wallet &&\r\n                  isActive &&\r\n                  endDate &&\r\n                  Date.now() < endDate.getTime() && (\r\n                    <Countdown\r\n                      date={toDate(candyMachine?.state?.endSettings?.number)}\r\n                      onMount={({ completed }) => completed && setIsEnded(true)}\r\n                      onComplete={() => {\r\n                        setIsEnded(true);\r\n                      }}\r\n                      renderer={renderEndDateCounter}\r\n                    />\r\n                  )}\r\n                <MintButtonContainer>\r\n                  {!isActive &&\r\n                  !isEnded &&\r\n                  candyMachine?.state.goLiveDate &&\r\n                  (!isWLOnly || whitelistTokenBalance > 0) ? (\r\n                    <Countdown\r\n                      date={toDate(candyMachine?.state.goLiveDate)}\r\n                      onMount={({ completed }) =>\r\n                        completed && setIsActive(!isEnded)\r\n                      }\r\n                      onComplete={() => {\r\n                        setIsActive(!isEnded);\r\n                      }}\r\n                      renderer={renderGoLiveDateCounter}\r\n                    />\r\n                  ) : !wallet ? (\r\n                    <ConnectButton>Connect Wallet</ConnectButton>\r\n                  ) : !isWLOnly || whitelistTokenBalance > 0 ? (\r\n                    candyMachine?.state.gatekeeper &&\r\n                    wallet.publicKey &&\r\n                    wallet.signTransaction ? (\r\n                      <GatewayProvider\r\n                        wallet={{\r\n                          publicKey:\r\n                            wallet.publicKey ||\r\n                            new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                          //@ts-ignore\r\n                          signTransaction: wallet.signTransaction,\r\n                        }}\r\n                        // // Replace with following when added\r\n                        // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\r\n                        gatekeeperNetwork={\r\n                          candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                        } // This is the ignite (captcha) network\r\n                        /// Don't need this for mainnet\r\n                        clusterUrl={rpcUrl}\r\n                        cluster={cluster}\r\n                        options={{ autoShowModal: false }}\r\n                      >\r\n                        <MintButton\r\n                          candyMachine={candyMachine}\r\n                          isMinting={isMinting}\r\n                          isActive={isActive}\r\n                          isEnded={isEnded}\r\n                          isSoldOut={isSoldOut}\r\n                          onMint={onMint}\r\n                        />\r\n                      </GatewayProvider>\r\n                    ) : (\r\n                      <MintButton\r\n                        candyMachine={candyMachine}\r\n                        isMinting={isMinting}\r\n                        isActive={isActive}\r\n                        isEnded={isEnded}\r\n                        isSoldOut={isSoldOut}\r\n                        onMint={onMint}\r\n                      />\r\n                    )\r\n                  ) : (\r\n                    <h1>Mint is private.</h1>\r\n                  )}\r\n                </MintButtonContainer>\r\n                <p>\r\n                  {wallet.connected && shortenAddress(wallet.publicKey + \" \")}\r\n                  ||\r\n                  {\" Bal:- \" + (balance || 0).toLocaleString()} SOL\r\n                </p>\r\n\r\n                <br />\r\n              </NFT>\r\n              <CrossmintPayButton\r\n                collectionTitle=\"The Art of Field Recording\"\r\n                collectionDescription=\"The 1st pro-audio community collection of arts about field recording was designed in collab with neural network close to the style of one Swiss-born German artist. There are 505 unique works depicting all possible variations on field recording in a vibrant way of abstract expressionism. There are the recordings of the sea and forests, busy streets and public transport, the rain and a bonfire, the buzzing of a fly, whistling winds, meadows, the bells and human voices (indoor and outdoor public tones), classical concerts, winter chill vibes and others.\"\r\n                collectionPhoto=\"https://gateway.pinata.cloud/ipfs/QmPNwn4wSfdLowy15rdFJyf1t6CbS2URds327LSYxuprPA\"\r\n                clientId=\"396e4c63-20bd-477c-b041-c5bd6d4b198d\"\r\n                mintConfig={{\"type\":\"candy-machine\"}}\r\n            />\r\n            </DesContainer>\r\n          </MintContainer>\r\n        )}\r\n      </MainContainer>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n    ConnectionProvider,\r\n    WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n    getPhantomWallet,\r\n    getSlopeWallet,\r\n    getSolflareWallet,\r\n    getSolflareWebWallet,\r\n    getSolletWallet,\r\n    getSolletExtensionWallet,\r\n    getSolongWallet,\r\n    getLedgerWallet,\r\n    getSafePalWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n    WalletModalProvider\r\n} from '@solana/wallet-adapter-react-ui';\r\n\r\nimport \"./App.css\";\r\nimport { DEFAULT_TIMEOUT } from './connection';\r\nimport Home from \"./Home\";\r\n\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n    try {\r\n        const candyMachineId = new anchor.web3.PublicKey(\r\n            process.env.REACT_APP_CANDY_MACHINE_ID!,\r\n        );\r\n\r\n        return candyMachineId;\r\n    } catch (e) {\r\n        console.log('Failed to construct CandyMachineId', e);\r\n        return undefined;\r\n    }\r\n};\r\n\r\nconst candyMachineId = getCandyMachineId();\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(\r\n    rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\r\n);\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        type: 'dark',\r\n    },\r\n    overrides: {\r\n        MuiButtonBase: {\r\n            root: {\r\n                justifyContent: 'flex-start',\r\n            },\r\n        },\r\n        MuiButton: {\r\n            root: {\r\n                textTransform: undefined,\r\n                padding: '12px 16px',\r\n            },\r\n            startIcon: {\r\n                marginRight: 8,\r\n            },\r\n            endIcon: {\r\n                marginLeft: 8,\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nconst App = () => {\r\n    // Custom RPC endpoint.\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\r\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\r\n    // of wallets that your users connect to will be loaded.\r\n    const wallets = useMemo(\r\n        () => [\r\n            getPhantomWallet(),\r\n            getSlopeWallet(),\r\n            getSolflareWallet(),\r\n            getSolflareWebWallet(),\r\n            getSolletWallet({ network }),\r\n            getSolletExtensionWallet({ network }),\r\n            getSolongWallet(),\r\n            getLedgerWallet(),\r\n            getSafePalWallet(),\r\n        ],\r\n        []\r\n    );\r\n\r\n  return (\r\n      <ThemeProvider theme={theme}>\r\n        <ConnectionProvider endpoint={endpoint}>\r\n          <WalletProvider wallets={wallets} autoConnect={true}>\r\n            <WalletModalProvider>\r\n              <Home\r\n                candyMachineId={candyMachineId}\r\n                connection={connection}\r\n                txTimeout={DEFAULT_TIMEOUT}\r\n                rpcHost={rpcHost}\r\n                network={network}\r\n              />\r\n            </WalletModalProvider>\r\n          </WalletProvider>\r\n        </ConnectionProvider>\r\n      </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n  hideDuration?: number | null;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n    new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n    'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n    mint: anchor.web3.PublicKey,\r\n    buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n    gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n      CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n    wallet: anchor.web3.PublicKey,\r\n    gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        wallet.toBuffer(),\r\n        Buffer.from('gateway'),\r\n        Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n        gatekeeperNetwork.toBuffer(),\r\n      ],\r\n      CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n    associatedTokenAddress: anchor.web3.PublicKey,\r\n    payer: anchor.web3.PublicKey,\r\n    walletAddress: anchor.web3.PublicKey,\r\n    splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","import * as anchor from '@project-serum/anchor';\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport {\r\n    SystemProgram,\r\n    Transaction,\r\n    SYSVAR_SLOT_HASHES_PUBKEY,\r\n} from '@solana/web3.js';\r\nimport { sendTransactions, SequenceType } from './connection';\r\n\r\nimport {\r\n    CIVIC,\r\n    getAtaForMint,\r\n    getNetworkExpire,\r\n    getNetworkToken,\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n    'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\ninterface CandyMachineState {\r\n    authority: anchor.web3.PublicKey;\r\n    itemsAvailable: number;\r\n    itemsRedeemed: number;\r\n    itemsRemaining: number;\r\n    treasury: anchor.web3.PublicKey;\r\n    tokenMint: null | anchor.web3.PublicKey;\r\n    isSoldOut: boolean;\r\n    isActive: boolean;\r\n    isPresale: boolean;\r\n    isWhitelistOnly: boolean;\r\n    goLiveDate: anchor.BN;\r\n    price: anchor.BN;\r\n    gatekeeper: null | {\r\n        expireOnUse: boolean;\r\n        gatekeeperNetwork: anchor.web3.PublicKey;\r\n    };\r\n    endSettings: null | {\r\n        number: anchor.BN;\r\n        endSettingType: any;\r\n    };\r\n    whitelistMintSettings: null | {\r\n        mode: any;\r\n        mint: anchor.web3.PublicKey;\r\n        presale: boolean;\r\n        discountPrice: null | anchor.BN;\r\n    };\r\n    hiddenSettings: null | {\r\n        name: string;\r\n        uri: string;\r\n        hash: Uint8Array;\r\n    };\r\n    retainAuthority: boolean;\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n    id: anchor.web3.PublicKey;\r\n    program: anchor.Program;\r\n    state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n    txid: anchor.web3.TransactionSignature,\r\n    timeout: number,\r\n    connection: anchor.web3.Connection,\r\n    queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n    let done = false;\r\n    let status: anchor.web3.SignatureStatus | null | void = {\r\n        slot: 0,\r\n        confirmations: 0,\r\n        err: null,\r\n    };\r\n    let subId = 0;\r\n    status = await new Promise(async (resolve, reject) => {\r\n        setTimeout(() => {\r\n            if (done) {\r\n                return;\r\n            }\r\n            done = true;\r\n            console.log('Rejecting for timeout...');\r\n            reject({ timeout: true });\r\n        }, timeout);\r\n\r\n        while (!done && queryStatus) {\r\n            // eslint-disable-next-line no-loop-func\r\n            (async () => {\r\n                try {\r\n                    const signatureStatuses = await connection.getSignatureStatuses([\r\n                        txid,\r\n                    ]);\r\n                    status = signatureStatuses && signatureStatuses.value[0];\r\n                    if (!done) {\r\n                        if (!status) {\r\n                            console.log('REST null result for', txid, status);\r\n                        } else if (status.err) {\r\n                            console.log('REST error for', txid, status);\r\n                            done = true;\r\n                            reject(status.err);\r\n                        } else if (!status.confirmations) {\r\n                            console.log('REST no confirmations for', txid, status);\r\n                        } else {\r\n                            console.log('REST confirmation for', txid, status);\r\n                            done = true;\r\n                            resolve(status);\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!done) {\r\n                        console.log('REST connection error: txid', txid, e);\r\n                    }\r\n                }\r\n            })();\r\n            await sleep(2000);\r\n        }\r\n    });\r\n\r\n    done = true;\r\n    console.log('Returning status', status);\r\n    return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n    associatedTokenAddress: anchor.web3.PublicKey,\r\n    payer: anchor.web3.PublicKey,\r\n    walletAddress: anchor.web3.PublicKey,\r\n    splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n    const keys = [\r\n        { pubkey: payer, isSigner: true, isWritable: true },\r\n        { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n        { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n        { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n        {\r\n            pubkey: anchor.web3.SystemProgram.programId,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n        {\r\n            pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    return new anchor.web3.TransactionInstruction({\r\n        keys,\r\n        programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n        data: Buffer.from([]),\r\n    });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n    anchorWallet: anchor.Wallet,\r\n    candyMachineId: anchor.web3.PublicKey,\r\n    connection: anchor.web3.Connection,\r\n): Promise<CandyMachineAccount> => {\r\n    const provider = new anchor.Provider(connection, anchorWallet, {\r\n        preflightCommitment: 'processed',\r\n    });\r\n\r\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n    const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n    const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n    return {\r\n        id: candyMachineId,\r\n        program,\r\n        state: {\r\n            authority: state.authority,\r\n            itemsAvailable,\r\n            itemsRedeemed,\r\n            itemsRemaining,\r\n            isSoldOut: itemsRemaining === 0,\r\n            isActive: false,\r\n            isPresale: false,\r\n            isWhitelistOnly: false,\r\n            goLiveDate: state.data.goLiveDate,\r\n            treasury: state.wallet,\r\n            tokenMint: state.tokenMint,\r\n            gatekeeper: state.data.gatekeeper,\r\n            endSettings: state.data.endSettings,\r\n            whitelistMintSettings: state.data.whitelistMintSettings,\r\n            hiddenSettings: state.data.hiddenSettings,\r\n            price: state.data.price,\r\n            retainAuthority: state.data.retainAuthority,\r\n        },\r\n    };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n    mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n    return (\r\n        await anchor.web3.PublicKey.findProgramAddress(\r\n            [\r\n                Buffer.from('metadata'),\r\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n                mint.toBuffer(),\r\n                Buffer.from('edition'),\r\n            ],\r\n            TOKEN_METADATA_PROGRAM_ID,\r\n        )\r\n    )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n    mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n    return (\r\n        await anchor.web3.PublicKey.findProgramAddress(\r\n            [\r\n                Buffer.from('metadata'),\r\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n                mint.toBuffer(),\r\n            ],\r\n            TOKEN_METADATA_PROGRAM_ID,\r\n        )\r\n    )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n    candyMachine: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n    return await anchor.web3.PublicKey.findProgramAddress(\r\n        [Buffer.from('candy_machine'), candyMachine.toBuffer()],\r\n        CANDY_MACHINE_PROGRAM,\r\n    );\r\n};\r\n\r\nexport const getCollectionPDA = async (\r\n    candyMachineAddress: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n    return await anchor.web3.PublicKey.findProgramAddress(\r\n        [Buffer.from('collection'), candyMachineAddress.toBuffer()],\r\n        CANDY_MACHINE_PROGRAM,\r\n    );\r\n};\r\n\r\nexport interface CollectionData {\r\n    mint: anchor.web3.PublicKey;\r\n    candyMachine: anchor.web3.PublicKey;\r\n}\r\n\r\nexport const getCollectionAuthorityRecordPDA = async (\r\n    mint: anchor.web3.PublicKey,\r\n    newAuthority: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n    return (\r\n        await anchor.web3.PublicKey.findProgramAddress(\r\n            [\r\n                Buffer.from('metadata'),\r\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n                mint.toBuffer(),\r\n                Buffer.from('collection_authority'),\r\n                newAuthority.toBuffer(),\r\n            ],\r\n            TOKEN_METADATA_PROGRAM_ID,\r\n        )\r\n    )[0];\r\n};\r\n\r\nexport type SetupState = {\r\n    mint: anchor.web3.Keypair;\r\n    userTokenAccount: anchor.web3.PublicKey;\r\n    transaction: string;\r\n};\r\n\r\nexport const createAccountsForMint = async (\r\n    candyMachine: CandyMachineAccount,\r\n    payer: anchor.web3.PublicKey,\r\n): Promise<SetupState> => {\r\n    const mint = anchor.web3.Keypair.generate();\r\n    const userTokenAccountAddress = (\r\n        await getAtaForMint(mint.publicKey, payer)\r\n    )[0];\r\n\r\n    const signers: anchor.web3.Keypair[] = [mint];\r\n    const instructions = [\r\n        anchor.web3.SystemProgram.createAccount({\r\n            fromPubkey: payer,\r\n            newAccountPubkey: mint.publicKey,\r\n            space: MintLayout.span,\r\n            lamports:\r\n                await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n                    MintLayout.span,\r\n                ),\r\n            programId: TOKEN_PROGRAM_ID,\r\n        }),\r\n        Token.createInitMintInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            mint.publicKey,\r\n            0,\r\n            payer,\r\n            payer,\r\n        ),\r\n        createAssociatedTokenAccountInstruction(\r\n            userTokenAccountAddress,\r\n            payer,\r\n            payer,\r\n            mint.publicKey,\r\n        ),\r\n        Token.createMintToInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            mint.publicKey,\r\n            userTokenAccountAddress,\r\n            payer,\r\n            [],\r\n            1,\r\n        ),\r\n    ];\r\n\r\n    return {\r\n        mint: mint,\r\n        userTokenAccount: userTokenAccountAddress,\r\n        transaction: (\r\n            await sendTransactions(\r\n                candyMachine.program.provider.connection,\r\n                candyMachine.program.provider.wallet,\r\n                [instructions],\r\n                [signers],\r\n                SequenceType.StopOnFailure,\r\n                'singleGossip',\r\n                () => {},\r\n                () => false,\r\n                undefined,\r\n                [],\r\n                [],\r\n            )\r\n        ).txs[0].txid,\r\n    };\r\n};\r\n\r\ntype MintResult = {\r\n    mintTxId: string;\r\n    metadataKey: anchor.web3.PublicKey;\r\n};\r\n\r\nexport const mintOneToken = async (\r\n    candyMachine: CandyMachineAccount,\r\n    payer: anchor.web3.PublicKey,\r\n    mint: anchor.web3.Keypair,\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = [],\r\n    setupState?: SetupState,\r\n): Promise<MintResult | null> => {\r\n    const userTokenAccountAddress = (\r\n        await getAtaForMint(mint.publicKey, payer)\r\n    )[0];\r\n\r\n    const userPayingAccountAddress = candyMachine.state.tokenMint\r\n        ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n        : payer;\r\n\r\n    const candyMachineAddress = candyMachine.id;\r\n    const remainingAccounts = [];\r\n    const instructions = [];\r\n    const signers: anchor.web3.Keypair[] = [];\r\n    console.log('SetupState: ', setupState);\r\n    if (!setupState) {\r\n        signers.push(mint);\r\n        instructions.push(\r\n            ...[\r\n                anchor.web3.SystemProgram.createAccount({\r\n                    fromPubkey: payer,\r\n                    newAccountPubkey: mint.publicKey,\r\n                    space: MintLayout.span,\r\n                    lamports:\r\n                        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n                            MintLayout.span,\r\n                        ),\r\n                    programId: TOKEN_PROGRAM_ID,\r\n                }),\r\n                Token.createInitMintInstruction(\r\n                    TOKEN_PROGRAM_ID,\r\n                    mint.publicKey,\r\n                    0,\r\n                    payer,\r\n                    payer,\r\n                ),\r\n                createAssociatedTokenAccountInstruction(\r\n                    userTokenAccountAddress,\r\n                    payer,\r\n                    payer,\r\n                    mint.publicKey,\r\n                ),\r\n                Token.createMintToInstruction(\r\n                    TOKEN_PROGRAM_ID,\r\n                    mint.publicKey,\r\n                    userTokenAccountAddress,\r\n                    payer,\r\n                    [],\r\n                    1,\r\n                ),\r\n            ],\r\n        );\r\n    }\r\n\r\n    if (candyMachine.state.gatekeeper) {\r\n        remainingAccounts.push({\r\n            pubkey: (\r\n                await getNetworkToken(\r\n                    payer,\r\n                    candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n                )\r\n            )[0],\r\n            isWritable: true,\r\n            isSigner: false,\r\n        });\r\n\r\n        if (candyMachine.state.gatekeeper.expireOnUse) {\r\n            remainingAccounts.push({\r\n                pubkey: CIVIC,\r\n                isWritable: false,\r\n                isSigner: false,\r\n            });\r\n            remainingAccounts.push({\r\n                pubkey: (\r\n                    await getNetworkExpire(\r\n                        candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n                    )\r\n                )[0],\r\n                isWritable: false,\r\n                isSigner: false,\r\n            });\r\n        }\r\n    }\r\n    if (candyMachine.state.whitelistMintSettings) {\r\n        const mint = new anchor.web3.PublicKey(\r\n            candyMachine.state.whitelistMintSettings.mint,\r\n        );\r\n\r\n        const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n        remainingAccounts.push({\r\n            pubkey: whitelistToken,\r\n            isWritable: true,\r\n            isSigner: false,\r\n        });\r\n\r\n        if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n            remainingAccounts.push({\r\n                pubkey: mint,\r\n                isWritable: true,\r\n                isSigner: false,\r\n            });\r\n            remainingAccounts.push({\r\n                pubkey: payer,\r\n                isWritable: false,\r\n                isSigner: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    if (candyMachine.state.tokenMint) {\r\n        remainingAccounts.push({\r\n            pubkey: userPayingAccountAddress,\r\n            isWritable: true,\r\n            isSigner: false,\r\n        });\r\n        remainingAccounts.push({\r\n            pubkey: payer,\r\n            isWritable: false,\r\n            isSigner: true,\r\n        });\r\n    }\r\n    const metadataAddress = await getMetadata(mint.publicKey);\r\n    const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n        candyMachineAddress,\r\n    );\r\n\r\n    console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\r\n    instructions.push(\r\n        await candyMachine.program.instruction.mintNft(creatorBump, {\r\n            accounts: {\r\n                candyMachine: candyMachineAddress,\r\n                candyMachineCreator,\r\n                payer: payer,\r\n                wallet: candyMachine.state.treasury,\r\n                mint: mint.publicKey,\r\n                metadata: metadataAddress,\r\n                masterEdition,\r\n                mintAuthority: payer,\r\n                updateAuthority: payer,\r\n                tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n                tokenProgram: TOKEN_PROGRAM_ID,\r\n                systemProgram: SystemProgram.programId,\r\n                rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n                clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n                recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\r\n                instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n            },\r\n            remainingAccounts:\r\n                remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n        }),\r\n    );\r\n\r\n    const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\r\n    const collectionPDAAccount =\r\n        await candyMachine.program.provider.connection.getAccountInfo(\r\n            collectionPDA,\r\n        );\r\n\r\n    if (collectionPDAAccount && candyMachine.state.retainAuthority) {\r\n        try {\r\n            const collectionData =\r\n                (await candyMachine.program.account.collectionPda.fetch(\r\n                    collectionPDA,\r\n                )) as CollectionData;\r\n            console.log(collectionData);\r\n            const collectionMint = collectionData.mint;\r\n            const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\r\n                collectionMint,\r\n                collectionPDA,\r\n            );\r\n            console.log(collectionMint);\r\n            if (collectionMint) {\r\n                const collectionMetadata = await getMetadata(collectionMint);\r\n                const collectionMasterEdition = await getMasterEdition(collectionMint);\r\n                console.log('Collection PDA: ', collectionPDA.toBase58());\r\n                console.log('Authority: ', candyMachine.state.authority.toBase58());\r\n                instructions.push(\r\n                    await candyMachine.program.instruction.setCollectionDuringMint({\r\n                        accounts: {\r\n                            candyMachine: candyMachineAddress,\r\n                            metadata: metadataAddress,\r\n                            payer: payer,\r\n                            collectionPda: collectionPDA,\r\n                            tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n                            instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n                            collectionMint,\r\n                            collectionMetadata,\r\n                            collectionMasterEdition,\r\n                            authority: candyMachine.state.authority,\r\n                            collectionAuthorityRecord,\r\n                        },\r\n                    }),\r\n                );\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const instructionsMatrix = [instructions];\r\n    const signersMatrix = [signers];\r\n\r\n    try {\r\n        const txns = (\r\n            await sendTransactions(\r\n                candyMachine.program.provider.connection,\r\n                candyMachine.program.provider.wallet,\r\n                instructionsMatrix,\r\n                signersMatrix,\r\n                SequenceType.StopOnFailure,\r\n                'singleGossip',\r\n                () => {},\r\n                () => false,\r\n                undefined,\r\n                beforeTransactions,\r\n                afterTransactions,\r\n            )\r\n        ).txs.map(t => t.txid);\r\n        const mintTxn = txns[0];\r\n        return {\r\n            mintTxId: mintTxn,\r\n            metadataKey: metadataAddress,\r\n        };\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n    return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n","import {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from '@solana/web3.js';\r\n\r\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const DEFAULT_TIMEOUT = 60000;\r\n\r\nexport const getErrorForTransaction = async (\r\n    connection: Connection,\r\n    txid: string,\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, 'max');\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach(log => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[][],\r\n    signers: Keypair[][],\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  let toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n            connection,\r\n            wallet,\r\n            instructions[0],\r\n            filteredSigners[0],\r\n            'single',\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n            connection,\r\n            wallet,\r\n            instructions,\r\n            filteredSigners,\r\n            SequenceType.StopOnFailure,\r\n            'single',\r\n        );\r\n        ids = ids.concat(txs.map(t => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n        'Died on ',\r\n        stopPoint,\r\n        'retrying from instruction',\r\n        instructions[stopPoint],\r\n        'instructions length is',\r\n        instructions.length,\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructionSet: TransactionInstruction[][],\r\n    signersSet: Keypair[][],\r\n    sequenceType: SequenceType = SequenceType.Parallel,\r\n    commitment: Commitment = 'singleGossip',\r\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n    block?: BlockhashAndFeeCalculator,\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = [],\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = beforeTransactions;\r\n\r\n  if (!block) {\r\n    block = await connection.getRecentBlockhash(commitment);\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = block.blockhash;\r\n    transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n    );\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n  unsignedTxns.push(...afterTransactions);\r\n\r\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\r\n      t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  const fullySignedTransactions = unsignedTxns.filter(\r\n      t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  let signedTxns = await wallet.signAllTransactions(\r\n      partiallySignedTransactions,\r\n  );\r\n  signedTxns = fullySignedTransactions.concat(signedTxns);\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  console.log(\r\n      'Signed txns length',\r\n      signedTxns.length,\r\n      'vs handed in length',\r\n      instructionSet.length,\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise.then(({ txid, slot }) =>\r\n            successCallback(txid, i),\r\n        );\r\n        pendingTxns.push(signedTxnPromise);\r\n      } catch (e) {\r\n        console.log('Failed at txn index:', i);\r\n        console.log('Caught failure:', e);\r\n\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          return {\r\n            number: i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    const result = await Promise.all(pendingTxns);\r\n    return { number: signedTxns.length, txs: result };\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[] | Transaction,\r\n    signers: Keypair[],\r\n    awaitConfirmation = true,\r\n    commitment: Commitment = 'singleGossip',\r\n    includesFeePayer: boolean = false,\r\n    block?: BlockhashAndFeeCalculator,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction: Transaction;\r\n  if (!Array.isArray(instructions)) {\r\n    transaction = instructions;\r\n  } else {\r\n    transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n        block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n\r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map(s => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n          // fee payed by the wallet owner\r\n          wallet.publicKey,\r\n          ...signers.map(s => s.publicKey),\r\n      );\r\n    }\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n        txid,\r\n        DEFAULT_TIMEOUT,\r\n        connection,\r\n        commitment,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[],\r\n    signers: Keypair[],\r\n    commitment: Commitment = 'singleGossip',\r\n    includesFeePayer: boolean = false,\r\n    block?: BlockhashAndFeeCalculator,\r\n    beforeSend?: () => void,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nexport async function sendSignedTransaction({\r\n                                              signedTransaction,\r\n                                              connection,\r\n                                              timeout = DEFAULT_TIMEOUT,\r\n                                            }: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n      rawTransaction,\r\n      {\r\n        skipPreflight: true,\r\n      },\r\n  );\r\n\r\n  console.log('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n        txid,\r\n        timeout,\r\n        connection,\r\n        'recent',\r\n        true,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error('Transaction failed: Custom instruction error');\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error('Timeout Error caught', err);\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n          await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n                'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log('Latency', txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n    connection: Connection,\r\n    transaction: Transaction,\r\n    commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n      // @ts-ignore\r\n      connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n    txid: TransactionSignature,\r\n    timeout: number,\r\n    connection: Connection,\r\n    commitment: Commitment = 'recent',\r\n    queryStatus = false,\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n          txid,\r\n          (result, context) => {\r\n            done = true;\r\n            status = {\r\n              err: result.err,\r\n              slot: context.slot,\r\n              confirmations: 0,\r\n            };\r\n            if (result.err) {\r\n              console.log('Rejected via websocket', result.err);\r\n              reject(status);\r\n            } else {\r\n              console.log('Resolved via websocket', result);\r\n              resolve(status);\r\n            }\r\n          },\r\n          commitment,\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error('WS error in setup', txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  try {\r\n    connection.removeSignatureListener(subId);\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n"],"sourceRoot":""}